# Full-stack deployment with containerized frontend and backend
version: '3.8'

services:
  # Redis for caching
  redis:
    image: "redis/redis-stack-server:latest"
    container_name: job-search-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API service
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: job-search-backend
    ports:
      - "8000:8000"
    environment:
      - APP_MODE=cloud-ml
      - REDIS_URL=redis://redis:6379/0
      - PINECONE_API_KEY=fake-key-for-demo
      - PINECONE_INDEX_NAME=job-search-384
      - HF_INFERENCE_API=https://api-inference.huggingface.co/models/sentence-transformers/all-MiniLM-L6-v2
      - HF_TOKEN=demo-token-replace-with-real
      - LOG_LEVEL=INFO
      - LOG_TO_FILE=true
      - LOG_DIR=/app/logs
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ../:/app  # For development - remove in production
      - ../logs:/app/logs  # Mount logs directory
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery worker for background tasks (without Beat scheduler)
  worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: job-search-worker
    environment:
      - APP_MODE=cloud-ml
      - REDIS_URL=redis://redis:6379/0
      - PINECONE_API_KEY=fake-key-for-demo
      - PINECONE_INDEX_NAME=job-search-384
      - HF_INFERENCE_API=https://api-inference.huggingface.co/models/sentence-transformers/all-MiniLM-L6-v2
      - HF_TOKEN=demo-token-replace-with-real
      - LOG_LEVEL=INFO
      - LOG_TO_FILE=true
      - LOG_DIR=/app/logs
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ../:/app  # For development - remove in production
      - ../logs:/app/logs  # Mount logs directory
    restart: unless-stopped
    command: "celery -A src.job_search.scraping.tasks.celery_app worker --loglevel=info --concurrency=2"
    healthcheck:
      test: ["CMD", "celery", "-A", "src.job_search.scraping.tasks.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat scheduler (separate service for better resilience)
  scheduler:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: job-search-scheduler
    environment:
      - APP_MODE=cloud-ml
      - REDIS_URL=redis://redis:6379/0
      - PINECONE_API_KEY=fake-key-for-demo
      - PINECONE_INDEX_NAME=job-search-384
      - HF_INFERENCE_API=https://api-inference.huggingface.co/models/sentence-transformers/all-MiniLM-L6-v2
      - HF_TOKEN=demo-token-replace-with-real
      - LOG_LEVEL=INFO
      - LOG_TO_FILE=true
      - LOG_DIR=/app/logs
    depends_on:
      redis:
        condition: service_healthy
      worker:
        condition: service_healthy
    volumes:
      - ../:/app  # For development - remove in production
      - ../logs:/app/logs  # Mount logs directory
    restart: unless-stopped
    command: "celery -A src.job_search.scraping.tasks.celery_app beat --loglevel=info --schedule=/app/celerybeat-schedule"
    healthcheck:
      test: ["CMD", "sh", "-c", "celery -A src.job_search.scraping.tasks.celery_app inspect active | grep -q 'OK'"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Frontend Streamlit application
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: job-search-frontend
    ports:
      - "8501:8501"
    environment:
      - BACKEND_BASE_URL=http://backend:8000
      - API_TIMEOUT=30
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8501/_stcore/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  redis_data:
    driver: local

networks:
  default:
    name: job-search-network